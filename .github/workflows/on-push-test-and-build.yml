name: Build

on:
  push:
    branches:
      - "**"

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: "16"
          cache: "npm"

      - name: Install dependencies ðŸ“¦
        run: npm ci

      - name: Execute unit tests ðŸ§ª
        id: tests
        run: |
          test_results=`npm run test:unit:coverage`
          TEST_RUN_STATISTICS=${test_results#*================================================================================}
          echo ::set-output name=statistics::"$TEST_RUN_STATISTICS"

      - name: Compute short commit hashes
        id: sha_shorts
        run: |
          HEAD_SHA=`git rev-parse --short ${{ github.sha }}`
          echo ::set-output name=head_sha::"$HEAD_SHA"

      - name: Upload test coverage ðŸ§ª
        if: ${{ github.actor != 'dependabot[bot]' }}
        id: upload
        uses: cloudflare/pages-action@1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
          projectName: mr-components-coverage
          directory: coverage
          branch: ${{ steps.sha_shorts.outputs.head_sha }}

      - name: Comment coverage on active PR
        uses: actions/github-script@v6
        env:
          BRANCH_NAME: ${{ github.ref_name }}
          BRANCH_COMMIT: ${{ steps.sha_shorts.outputs.head_sha }}
          UPLOAD_URL: ${{ steps.upload.outputs.url }}
          TEST_STATISTICS: ${{ steps.tests.outputs.statistics }}
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const BRANCH_NAME = process.env.BRANCH_NAME;
            const BRANCH_COMMIT = process.env.BRANCH_COMMIT;
            const UPLOAD_URL = process.env.UPLOAD_URL;
            const TEST_STATISTICS = process.env.TEST_STATISTICS;
            const BASE_PAGES = "mr-components-coverage.pages.dev";

            // Get coverage summary with retries
            const getCoverageSummary = async (retryCount = 3) => {
              try {
                return await github.request(`${UPLOAD_URL}/coverage-summary.json`)
              } catch (error) {
                if (retryCount === 0) {
                  throw error
                } else {
                  console.log(error)
                  console.warn("Cloudflare pages request failed. Retrying...")
                  await new Promise(resolve => setTimeout(resolve, 1500));
                  return await getCoverageSummary(retryCount - 1)
                }
              }
            }

            // Get open pull request for $BRANCH_NAME
            const pullsQueryString = `is:pr state:open repo:${context.repo.owner}/${context.repo.repo} head:${BRANCH_NAME}`
            const {data: pulls} = await github.rest.search.issuesAndPullRequests({
              q: pullsQueryString
            });

            if (pulls.total_count > 0) {
              pulls.items.forEach(async (pullRequest) => {
                // Get the existing comments.
                const {data: comments} = await github.rest.issues.listComments({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: pullRequest.number,
                })

                const result = await getCoverageSummary()
                const totals = result.data.total
                const percentages = [totals.lines.pct, totals.statements.pct, totals.functions.pct, totals.branches.pct]
                const prPercentage = percentages.reduce((a, b) => a + b, 0) / percentages.length

                const botComment = comments.find(comment => comment.user.id === 41898282)
                const commentBody = `### ðŸ”– Coverage Report
                ---
                - **Base:** 81% | **Pull Request:** ${Math.round(prPercentage, -1)}%
                - **Coverage Summary:**

                |   Category  | Percentage |  Covered / Total  |
                | ----------- | ---------- | ----------------- |
                | Statements  |   ${totals.statements.pct}%   |      ${totals.statements.covered}/${totals.statements.total}      |
                | Branches    |   ${totals.branches.pct}%   |      ${totals.branches.covered}/${totals.branches.total}      |
                | Functions   |   ${totals.functions.pct}%   |      ${totals.functions.covered}/${totals.functions.total}      |
                | Lines       |   ${totals.lines.pct}%   |      ${totals.lines.covered}/${totals.lines.total}      |

                > Coverage data is based on head **${BRANCH_NAME}** (\`${BRANCH_COMMIT}\`) compared to base **${BASE_BRANCH_NAME}** (\`${BASE_COMMIT}\`).
                > ${TEST_STATISTICS}

                [View full coverage report ðŸ”—](${UPLOAD_URL})`

                if (botComment) {
                  await github.rest.issues.updateComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    comment_id: botComment.id,
                    body: commentBody
                  })
                } else {
                  await github.rest.issues.createComment({
                    issue_number: pullRequest.number,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    body: commentBody
                  })
                }
              })
            }

      - name: Build Docs ðŸ“•
        run: npm run build
