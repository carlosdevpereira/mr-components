name: Build

on:
  push:
    branches:
      - "**"

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: "16"
          cache: "npm"

      - name: Install dependencies 📦
        run: npm ci

      - name: Execute unit tests 🧪
        id: tests
        run: |
          echo $(./node_modules/jest/bin/jest.js --no-cache --detectOpenHandles --coverage --json) > ./coverage/test-results.json

      - name: Compute short commit hashes
        id: sha_shorts
        run: |
          HEAD_SHA=`git rev-parse --short ${{ github.sha }}`
          echo ::set-output name=head_sha::"$HEAD_SHA"

      - name: Upload test coverage 🧪
        if: ${{ github.actor != 'dependabot[bot]' }}
        id: upload
        uses: cloudflare/pages-action@1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
          projectName: mr-components-coverage
          directory: coverage
          branch: ${{ steps.sha_shorts.outputs.head_sha }}

      - name: Comment coverage on active PR
        uses: actions/github-script@v6
        env:
          BRANCH_NAME: ${{ github.ref_name }}
          BRANCH_COMMIT: ${{ steps.sha_shorts.outputs.head_sha }}
          UPLOAD_URL: ${{ steps.upload.outputs.url }}
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const BRANCH_NAME = process.env.BRANCH_NAME;
            const BRANCH_COMMIT = process.env.BRANCH_COMMIT;
            const UPLOAD_URL = process.env.UPLOAD_URL;
            const BASE_CLOUDFLARE_URL = "mr-components-coverage.pages.dev";

            // Get coverage summary with retries
            const getCoverageSummary = async (reportUrl, { retryCount = 3, ignoreErrors = false } = {}) => {
              try {
                return await github.request(`${reportUrl}/coverage-summary.json`)
              } catch (error) {
                if (retryCount === 0) {
                  if (!ignoreErrors) throw error
                } else {
                  console.log(error)
                  console.warn("Cloudflare pages request failed. Retrying...")
                  await new Promise(resolve => setTimeout(resolve, 2000));
                  return await getCoverageSummary(reportUrl, { retryCount: retryCount - 1 })
                }
              }
            }

            // Get coverage summary with retries
            const getTestResults = async (reportUrl, { retryCount = 3, ignoreErrors = false } = {}) => {
              try {
                return await github.request(`${reportUrl}/test-results.json`)
              } catch (error) {
                if (retryCount === 0) {
                  if (!ignoreErrors) throw error
                } else {
                  console.log(error)
                  console.warn("Cloudflare pages request failed. Retrying...")
                  await new Promise(resolve => setTimeout(resolve, 2000));
                  return await getCoverageSummary(reportUrl, { retryCount: retryCount - 1 })
                }
              }
            }

            // Get open pull requests for $BRANCH_NAME
            const {data: pulls} = await github.rest.search.issuesAndPullRequests({
              q: `is:pr state:open repo:${context.repo.owner}/${context.repo.repo} head:${BRANCH_NAME}`
            });

            console.log("pull requests: ", pulls)

            if (pulls.total_count > 0) {
              pulls.items.forEach(async (pull) => {
                // Get the existing comments.
                const { data: pullRequest } = await github.rest.pulls.get({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    pull_number: pull.number,
                })
                const shortBaseSha = pullRequest.base.sha.slice(0, 7)
                console.log("currently on PR: ", pullRequest)
                console.log("short hash: ", shortBaseSha)

                const headResult = await getCoverageSummary(UPLOAD_URL)
                console.log("head result: ", headResult)
                const headTotals = headResult.data.total
                const headPercentages = [headTotals.lines.pct, headTotals.statements.pct, headTotals.functions.pct, headTotals.branches.pct]
                const headAvgPercentage = headPercentages.reduce((a, b) => a + b, 0) / headPercentages.length
                console.log("head percentage: ", headAvgPercentage)

                const baseResult = await getCoverageSummary(`https://${shortBaseSha}.${BASE_CLOUDFLARE_URL}`, { retryCount: 0, ignoreErrors: true })
                let baseTotals
                let basePercentages = [0, 0, 0, 0]
                let baseAvgPercentage = 0
                console.log("base result: ", baseResult)
                if (baseResult) {
                  baseTotals = baseResult.data.total
                  basePercentages = [baseTotals.lines.pct, baseTotals.statements.pct, baseTotals.functions.pct, baseTotals.branches.pct]
                  baseAvgPercentage = basePercentages.reduce((a, b) => a + b, 0) / basePercentages.length
                }

                let statistics = await getTestResults(UPLOAD_URL)
                statistics = statistics.data

                const lastTestEndedAt = statistics.testResults[statistics.testResults.length - 1].endTime
                const msDifference = lastTestEndedAt - statistics.startTime
                const secondsTaken = Math.floor(msDifference/1000)
                const minutesTaken = Math.floor(msDifference/1000/60)
                const hoursTaken = Math.floor(msDifference/1000/60/60)

                let timeTaken = ''
                if (hoursTaken > 0) timeTaken = `${hoursTaken} hours, `
                if (minutesTaken > 0) timeTaken += `${minutesTaken} minutes and `
                if (secondsTaken > 0) timeTaken += `${secondsTaken} seconds`
                
                console.log("test result statistics: ", statistics)

                // Get the existing comments.
                const { data: comments } = await github.rest.issues.listComments({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: pullRequest.number,
                })
                const botComment = comments.find(comment => comment.user.id === 41898282)

                let coverageMessage
                if (headAvgPercentage > baseAvgPercentage) {
                  coverageMessage = `\n> Wooo 🎉, the tests are passing and the coverage percentage **increased** with this pull request, well done! 👏\n> ${pullRequest.base.ref}: **${Math.round(baseAvgPercentage, -1)}%** | ${BRANCH_NAME}: **${Math.round(headAvgPercentage, -1)}%**`
                } else if (headAvgPercentage === baseAvgPercentage) {
                  coverageMessage = `\n> Good job 👌, the tests are passing and the coverage percentage remained intact.`
                } else {
                  coverageMessage = `\n> Tests are passing but the coverage percentage **is decreased** 😱 by this pull request, read coverage report below for more details.\n\n🔻 ${pullRequest.base.ref}: **${Math.round(baseAvgPercentage, -1)}%** | ${BRANCH_NAME}: **${Math.round(headAvgPercentage, -1)}%** 🔻`
                }

                console.log("coverage message: ", coverageMessage)

                let coverageSummaryTable = `
            \`\`\`diff
            @@                             Coverage Summary                          @@
               -----------------------------------------------------------------------
              |   Category   |  Master Branch  |  Current Branch  |  Covered / Total  |
              | ------------ | --------------- | ---------------- | ----------------- |`

                coverageSummaryTable += `\n${!baseResult || headTotals.statements.pct > baseTotals.statements.pct ? '+' : (baseTotals.statements.pct === headTotals.statements.pct ? ' ' : '-') } `
                coverageSummaryTable += `| Statements   |     ${ baseResult ? baseTotals.statements.pct.toString() + "%" : "   -  " }      |      ${headTotals.statements.pct}%      |       ${headTotals.statements.covered}/${headTotals.statements.total}     |`
                coverageSummaryTable += `\n${!baseResult || headTotals.branches.pct > baseTotals.branches.pct ? '+' : (baseTotals.branches.pct === headTotals.branches.pct ? ' ' : '-') } `
                coverageSummaryTable += `| Branches     |     ${ baseResult ? baseTotals.branches.pct.toString() + "%" : "   -  " }      |      ${headTotals.branches.pct}%      |       ${headTotals.branches.covered}/${headTotals.branches.total}     |`
                coverageSummaryTable += `\n${!baseResult || headTotals.functions.pct > baseTotals.functions.pct ? '+' : (baseTotals.functions.pct === headTotals.functions.pct ? ' ' : '-') } `
                coverageSummaryTable += `| Functions    |     ${ baseResult ? baseTotals.functions.pct.toString() + "%" : "   -  " }      |      ${headTotals.functions.pct}%      |       ${headTotals.functions.covered}/${headTotals.functions.total}     |`
                coverageSummaryTable += `\n${!baseResult || headTotals.lines.pct > baseTotals.lines.pct ? '+' : (baseTotals.lines.pct === headTotals.lines.pct ? ' ' : '-') } `
                coverageSummaryTable += `| Lines        |     ${ baseResult ? baseTotals.lines.pct.toString() + "%" : "   -  " }      |      ${headTotals.lines.pct}%      |       ${headTotals.lines.covered}/${headTotals.lines.total}     |`

                coverageSummaryTable += `\n  -------------------------------------------------------------------------\n\`\`\``

                console.log("coverage table: ", coverageSummaryTable)
                

                const commentBody = `## 🔖 Coverage Report

            ${coverageMessage}

            ${coverageSummaryTable}

            <details>
              <summary>Metrics</summary>
              
              - Test Suites: **${statistics.numPassedTestSuites} passed**, ${statistics.numTotalTestSuites} total
              - Tests: **${statistics.numPassedTests} passed**, ${statistics.numTotalTests} total
              - Snapshots: **${statistics.snapshot.total} total**
              - Time: **${timeTaken}**
            </details>

            > Coverage data is based on head **${BRANCH_NAME}** (\`${BRANCH_COMMIT}\`) compared to base **${pullRequest.base.ref}** (\`${shortBaseSha}\`).

            [View full coverage report 🔗](${UPLOAD_URL})`

                if (botComment) {
                  await github.rest.issues.updateComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    comment_id: botComment.id,
                    body: commentBody
                  })
                } else {
                  await github.rest.issues.createComment({
                    issue_number: pullRequest.number,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    body: commentBody
                  })
                }
              })
            }

      - name: Build Docs 📕
        run: npm run build
