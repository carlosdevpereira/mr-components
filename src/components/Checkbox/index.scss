@use 'sass:color';
@use 'sass:map';

@import '../../assets/scss/_variables.scss';

$sizes: (
	'sm': (
		'font-size': 11.5px,
		'line-height': 20px,
		'width': 19px,
		'height': 19px,
		'checkmark-width': 3px,
		'checkmark-height': 8.5px,
		'switch-width': 34px,
		'switch-checkmark-width': 13px,
		'switch-checkmark-height': 13px,
		'switch-translate': 17px,
	),
	'md': (
		'font-size': 13.5px,
		'line-height': 21px,
		'width': 21px,
		'height': 21px,
		'checkmark-width': 5px,
		'checkmark-height': 9px,
		'switch-width': 38px,
		'switch-checkmark-width': 15px,
		'switch-checkmark-height': 15px,
		'switch-translate': 19px,
	),
	'lg': (
		'font-size': 18px,
		'line-height': 23px,
		'width': 24px,
		'height': 24px,
		'checkmark-width': 6px,
		'checkmark-height': 12px,
		'checkmark-left': 7px,
		'switch-width': 44px,
		'switch-checkmark-width': 18px,
		'switch-checkmark-height': 18px,
		'switch-translate': 21.5px,
	),
);

.mr-checkbox-container {
	display: flex;
	max-width: max-content;
	font-family: $fontFamily;
	font-size: $fontSize;
	line-height: $lineHeight;
	vertical-align: top;
	cursor: pointer;

	&.disabled {
		cursor: not-allowed;
	}

	@supports (-webkit-appearance: none) or (-moz-appearance: none) {
		input[type='checkbox'] {
			position: relative;
			display: flex;
			align-items: center;
			height: 21px;
			margin: 0;
			margin-right: 8px;
			vertical-align: middle;
			cursor: pointer;
			border: 1px solid $borderColor;
			outline: none;
			transition: background 0.3s, border-color 0.3s, box-shadow 0.2s;
			appearance: none;
			appearance: none;

			&::after {
				content: '';
				transition: transform 0.3s ease, opacity 0.2s;
			}

			&:checked::after {
				transition: transform 0.6s cubic-bezier(0.2, 0.85, 0.32, 1.2), opacity 0.3s;
			}

			&:disabled {
				cursor: not-allowed;
				opacity: 0.6;
			}

			&:not(.switch-theme) {
				justify-content: center;
				width: 21px;
				overflow: hidden;
				border-radius: 7px;

				&::after {
					width: 5px;
					height: 9px;
					border: 2px solid;
					border-top: 0;
					border-left: 0;
					opacity: 0;
					transform: translateX(-150%) translateY(-150%) rotate(-140deg);
				}

				&:checked::after {
					opacity: 1;
					transform: translateX(0) translateY(-1.5px) rotate(43deg);
				}
			}

			&.solid-theme {
				@each $variantName, $variantColor in $variants {
					&.variant-#{$variantName} {
						&::after {
							@if color.lightness($variantColor) < 80 {
								border-color: $whiteColor;
							}

							@else {
								border-color: $textColor;
							}
						}

						&:checked {
							background-color: $variantColor;
							border-color: $variantColor;
						}

						&:focus {
							@if color.lightness($variantColor) < 80 {
								border-color: fade-out($variantColor, 0.5);
								box-shadow: 0 0 0 2px fade-out($variantColor, 0.75);
							}

							@else {
								border-color: fade-out($textColor, 0.8);
								box-shadow: 0 0 0 2px fade-out($textColor, 0.95);
							}
						}
					}
				}
			}

			&.outlined-theme {
				@each $variantName, $variantColor in $variants {
					&.variant-#{$variantName} {
						&::after {
							@if color.lightness($variantColor) < 80 {
								border-color: $variantColor;
							}

							@else {
								border-color: $textColor;
							}
						}

						&:checked {
							border-color: $variantColor;
						}

						&:focus {
							@if color.lightness($variantColor) < 80 {
								box-shadow: 0 0 0 2px fade-out($variantColor, 0.75);
							}

							@else {
								box-shadow: 0 0 0 2px fade-out($textColor, 0.95);
							}
						}
					}
				}
			}

			&.switch-theme {
				width: 38px;
				border-radius: 11px;

				&::after {
					width: 15px;
					height: 15px;
					background-color: #bbc1e1;
					border-radius: 50%;
					transform: translateX(2px);
				}

				&:checked::after {
					transform: translateX(17px);
				}

				&:disabled {
					&:not(:checked) {
						&::after {
							opacity: 0.6;
						}
					}
				}

				@each $variantName, $variantColor in $variants {
					&.variant-#{$variantName} {
						&:checked {
							background-color: $variantColor;

							&::after {
								@if color.lightness($variantColor) < 80 {
									background-color: $whiteColor;
								}

								@else {
									background-color: fade-out($textColor, 0.2);
								}
							}
						}

						&:checked {
							border-color: $variantColor;

							&:focus {
								@if color.lightness($variantColor) < 80 {
									box-shadow: 0 0 0 2px fade-out($variantColor, 0.85);
								}

								@else {
									box-shadow: 0 0 0 2px fade-out($textColor, 0.95);
								}
							}
						}
					}
				}
			}
		}

		@each $sizeName, $sizeValues in $sizes {
			&.size-#{$sizeName} {
				font-size: map.get($sizeValues, 'font-size');
				line-height: map.get($sizeValues, 'line-height');

				input[type='checkbox'] {
					&:not(.switch-theme) {
						width: map.get($sizeValues, 'width');
						height: map.get($sizeValues, 'height');

						&::after {
							left: map.get($sizeValues, 'checkmark-left');
							width: map.get($sizeValues, 'checkmark-width');
							height: map.get($sizeValues, 'checkmark-height');
						}
					}

					&.switch-theme {
						width: map.get($sizeValues, 'switch-width');
						height: map.get($sizeValues, 'height');

						&::after {
							width: map.get($sizeValues, 'switch-checkmark-width');
							height: map.get($sizeValues, 'switch-checkmark-height');
						}

						&:checked::after {
							transform: translateX(map.get($sizeValues, 'switch-translate'));
						}
					}
				}
			}
		}
	}
}
